#!/bin/bash -eu

#
# CLI: Chassis LED identify control
#

# prevent modification of executable path
PATH="/bin:/sbin:/usr/bin:/usr/sbin"

# D-Bus object descriptions to manage the LED
DBUS_SERVICE="xyz.openbmc_project.LED.GroupManager"
DBUS_OBJECT="/xyz/openbmc_project/led/groups/enclosure_identify"
DBUS_INTERFACE="xyz.openbmc_project.Led.Group"
DBUS_PROPERTY="Asserted"

# parse command line options
ACTION=
while [[ $# -gt 0 ]]; do
  case $1 in
    -h | --help)
      echo "Chassis LED identify control."
      echo "Use: ${0##*/} [OPTION...] ACTION"
      echo "Actions:"
      echo "  on            Turn LED on"
      echo "  off           Turn LED off"
      echo "  state         Print current LED state and exit [default]"
      echo "Options:"
      echo "  -h, --help    Print this help and exit"
      exit 0
      ;;
    on | off | state)
      if [[ -z "${ACTION}" ]]; then
        ACTION="$1"
      else
        echo "Invalid argument, action already defined" >&2
        exit 1
      fi
      ;;
    *)
      echo "Invalid argument: $1" >&2
      exit 1
      ;;
  esac
  shift
done

# elevate self privileges
[[ ${EUID} -eq 0 ]] || exec sudo $(realpath ${BASH_SOURCE[0]}) ${ACTION}

# set state
STATE=
case "${ACTION}" in
  on ) STATE="true";;
  off ) STATE="false";;
esac
if [[ -n "${STATE}" ]]; then
  busctl set-property ${DBUS_SERVICE} ${DBUS_OBJECT} \
                      ${DBUS_INTERFACE} ${DBUS_PROPERTY} \
                      b ${STATE}
fi

# print current state
STATE="$(busctl get-property ${DBUS_SERVICE} ${DBUS_OBJECT} \
                             ${DBUS_INTERFACE} ${DBUS_PROPERTY} \
                             | awk '{print $NF}')"
case "${STATE}" in
  true) STATE="ON";;
  false) STATE="OFF";;
  *) STATE="Unknown";;
esac
echo "Current LED state: ${STATE}"
