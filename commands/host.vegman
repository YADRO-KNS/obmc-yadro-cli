#!/bin/bash -eu
#
# YADRO OpenBMC Command Line Interface
# Copyright (C) 2020-2021 YADRO
#
# SPDX-License-Identifier: Apache-2.0
#

# CLI: Host control operations

# @doc cmd_power
# Host power actions, capping and usage
function cmd_power {
  subcommand "$@"
}

# @sudo cmd_power_on admin,operator
# @restrict cmd_power_on admin,operator
# @doc cmd_power_on
# Turn the host on
function cmd_power_on {
  expect_noarg "$@"
  ipmitool power on
  echo "Chassis power is switched on, host is booting up."
}

# @sudo cmd_power_off admin,operator
# @restrict cmd_power_off admin,operator
# @doc cmd_power_off
# Turn the host off
#  -f, --forced    Forced shutdown
#  -y, --yes       Do not ask for confirmation
function cmd_power_off {
  local force=""
  local yes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f | --force) force="y";;
      -y | --yes) yes="y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  if [[ -n "${force}" ]]; then
    echo "Host will be shut down forcefully. Data loss may occur."
  else
    echo "Host will be turned off."
  fi

  if [[ -z "${yes}" ]]; then
    confirm
  fi

  if [[ -n "${force}" ]]; then
    ipmitool chassis power off
    echo "Chassis power is switched off, host is down."
  else
    ipmitool power off
    echo "Shutdown signal sent to host, waiting to power the system off."
  fi
}

## @sudo cmd_power_reboot admin,operator
## @restrict cmd_power_status admin,operator
## @doc cmd_power_reboot
## Performs host reboot
#function cmd_power_reboot {
#  not implemented
#}

# @sudo cmd_power_status admin,operator,user
# @doc cmd_power_status
# Get host power status
function cmd_power_status {
  expect_noarg "$@"
  ipmitool power status
}

## @sudo cmd_power_capping admin
## @restrict cmd_power_capping admin
## @doc cmd_power_capping
## Configure power capping
##   -d, --disable       Disable power capping
##   -e, --enable WATTS  Enable power capping
#function cmd_power_capping {
#  not implemented
#}

## @doc cmd_power_usage
## View power usage
#function cmd_power_usage {
#  not implemented
#}

# @sudo cmd_virtualmedia admin
# @restrict cmd_virtualmedia admin
# @doc cmd_virtualmedia
# Access Virtual Media
function cmd_virtualmedia {
  subcommand "$@"
}

# @sudo cmd_virtualmedia_mount admin
# @restrict cmd_virtualmedia_mount admin
# @doc cmd_virtualmedia_mount
# Mount a virtual media
#  --usb    - the USB interface type
#  --usb-ro - the USB interface type (read-only)
#  --hdd    - the HDD interface type
#  --cdrom  - the CD/DVD/BD-ROM interface type (read-only), based on file size
#  FILE â€” path to image file
function cmd_virtualmedia_mount {
  local imagefile=""
  local type=""

  while [[ $# -gt 0 ]]; do
    case "${1}" in
      --usb) type="usb";;
      --usb-ro) type="usb-ro";;
      --hdd) type="hdd";;
      --cdrom) type="cdrom";;
      *)
        if [[ -n "${imagefile}" ]]; then
          abort_badarg "${1}"
        else
          imagefile="${1}"
        fi
        ;;
    esac
    shift
  done

 if [[ -z "${type}" ]]; then
    echo "Please specify the Virtual Media interface type" >&2
    return 1
  fi

  if [[ ! -e ${imagefile} ]] || [[ -d ${imagefile} ]]; then
    echo "Please specify the path to image file" >&2
    return 1
  fi

  usb-ctrl insert "usb.ms.cli" "${imagefile}" "${type}"
}

# @sudo cmd_virtualmedia_umount admin
# @restrict cmd_virtualmedia_umount admin
# @doc cmd_virtualmedia_umount
# Unmount the virtual media
#  -y, --yes  - does not ask for interactive confirmation
function cmd_virtualmedia_umount {
  local yes=""

  while [[ $# -gt 0 ]]; do
    case "${1}" in
      -y | --yes) yes="y";;
      *) abort_badarg "${1}";;
    esac
    shift
  done

  if [[ -z "${yes}" ]]; then
    confirm
  fi

  usb-ctrl eject "usb.ms.cli"
}

# @sudo cmd_console admin,user
# @restrict cmd_console admin,user
# @doc cmd_console
# Open virtual console
function cmd_console {
  expect_noarg "$@"
  cat << EOF
Starting a Host console connection.
Send <CR>~. to terminate it.
If connected via SSH, add extra ~ characters, one per SSH connection.
EOF
  exec obmc-console-client
}
