#!/bin/bash -eu
#
# YADRO OpenBMC Command Line Interface
# Copyright (C) 2020-2021 YADRO
#
# SPDX-License-Identifier: Apache-2.0
#

# CLI: Host control operations

## @doc cmd_boot
## Boot configuration
#function cmd_boot {
#  subcommand "$@"
#}

## @sudo cmd_boot_next admin,operator
## @restrict cmd_boot_next admin,operator
## @doc cmd_boot_next
## Choose boot source for the next boot
##   -l, --local
##   -p, --pxe
##   -s, --san
##   -u, --usb
##   -m, --media
#function cmd_boot_next {
#  not implemented
#}

## @sudo cmd_boot_persistent admin,operator
## @restrict cmd_boot_persistent admin,opertor
## @doc cmd_boot_persistent
## Choose default boot source
##   -l, --local
##   -p, --pxe
##   -s, --san
##   -u, --usb
##   -m, --media
#function cmd_boot_persistent {
#  not implemented
#}

## @doc cmd_boot_show
## Show actual setting for boot source
#function cmd_boot_status {
#  not implemented
#}

## @sudo cmd_boot_progress admin,operator,user
## @doc cmd_boot_progress
## Show host boot progress status
#function cmd_boot_progress {
#  expect_noarg "$@"
#  obmcutil status | sed 's/xyz.*\.//'
#}
# @doc cmd_power
# Host power actions, capping and usage
function cmd_power {
  subcommand "$@"
}

# @sudo cmd_power_on admin,operator
# @restrict cmd_power_on admin,operator
# @doc cmd_power_on
# Turn the host on
function cmd_power_on {
  expect_noarg "$@"
  exec_tool hostpwrctl on
  log_audit "Switched chassis power on, booting host"
}

# @sudo cmd_power_off admin,operator
# @restrict cmd_power_off admin,operator
# @doc cmd_power_off
# Turn the host off
#   -f, --force - Forced shutdown
#   -y, --yes   - Do not ask for confirmation
function cmd_power_off {
  local force=""
  local yes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f | --force) force="y";;
      -y | --yes) yes="y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  if [[ -n "${force}" ]]; then
    echo "Host will be shut down forcefully. Data loss may occur."
  else
    echo "Host will be turned off."
  fi

  if [[ -z "${yes}" ]]; then
    confirm
  fi

  if [[ -n "${force}" ]]; then
    exec_tool hostpwrctl off
    log_audit "Switched chassis power off, host is down"
  else
    exec_tool hostpwrctl soft
    log_audit "Requested host shutdown"
  fi
}

# @sudo cmd_power_reboot admin,operator
# @restrict cmd_power_reboot admin,operator
# @doc cmd_power_reboot
# Performs host reboot
#   -y, --yes - Do not ask for confirmation
function cmd_power_reboot {
  local yes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -y | --yes) yes="y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  echo "Host will be hard reset. Data loss may occur."
  if [[ -z "${yes}" ]]; then
    confirm
  fi

  exec_tool hostpwrctl reboot
  log_audit "Reset host"
}

# @sudo cmd_power_status admin,operator,user
# @doc cmd_power_status
# Get host power status
function cmd_power_status {
  expect_noarg "$@"
  exec_tool hostpwrctl status
}

## @sudo cmd_power_capping admin
## @restrict cmd_power_capping admin
## @doc cmd_power_capping
## Configure power capping
##   -d, --disable      - Disable power capping
##   -e, --enable WATTS - Enable power capping
#function cmd_power_capping {
#  not implemented
#}

## @doc cmd_power_usage
## View power usage
#function cmd_power_usage {
#  not implemented
#}

# @sudo cmd_virtualmedia admin
# @restrict cmd_virtualmedia admin
# @doc cmd_virtualmedia
# Access Virtual Media
function cmd_virtualmedia {
  subcommand "$@"
}

# @sudo cmd_virtualmedia_status admin
# @restrict cmd_virtualmedia_status admin
# @doc cmd_virtualmedia_status
# Get the status of virtual media
function cmd_virtualmedia_status {
  vm-cli status
}

# @sudo cmd_virtualmedia_mount admin
# @restrict cmd_virtualmedia_mount admin
# @doc cmd_virtualmedia_mount
# Mount a virtual media
#   -m MODE     - The mount mode to selects the appropriate way to inject an image.
#      legacy   - accept images from an external server through a particular protocol.
#      nbd      - exports images from external NBD server.
#   --usb       - Mount as a USB interface type
#   --usb-ro    - Mount as a USB interface type (read-only)
#   --hdd       - Mount as an HDD interface type
#   --cdrom     - Mount as a CD/DVD/BD-ROM interface type (read-only),
#                 based on file size.
#   FILE        - An image file URL. Supported protocols are:
#                 smb, scp, nfs, ftp, sftp, http, https.
#                 LEGACY mode required.
#   ADDRESS     - An NBD external server address.
#                 NBD mode required.
#   -e EXPORT     An NBD export name.
#                 NBD mode required.
#   -r          - Readonly mode
#   -c          - Request to input the credentials when mounting an image from a
#                 remote server via a protocol that requires authentication.
function cmd_virtualmedia_mount {
  local imagefile=""
  local mode=""
  local export=""
  local type=""
  local readwrite=""
  local request_creds=""
  local imagefile_pattern="^(https?|smb|s?ftp|scp|nfs)://"
  while [[ $# -gt 0 ]]; do
    case "${1}" in
      --usb) type="usb";;
      --usb-ro) type="usb-ro";;
      --hdd) type="hdd";;
      --cdrom) type="cdrom";;
      -r) readwrite="-r";;
      -m) mode="${2}"
          shift;;
      -e) export="${2}"
          shift;;
      -c) request_creds="-c";;
      *)
        if [[ -n "${imagefile}" ]]; then
          abort_badarg "${1}"
        else
          imagefile="${1}"
        fi
        ;;
    esac
    shift
  done

  if [[ -z "${mode}" || ( "${mode}" != "legacy" && "${mode}" != "nbd" ) ]]; then
    echo "Please specify the valid Virtual Media mount mode" >&2
    return 1
  fi

  if [[ -z "${type}" ]]; then
    echo "Please specify the Virtual Media interface type" >&2
    return 1
  fi

  if [[ "${mode}" == "legacy" && ! ( ${imagefile} =~ ${imagefile_pattern} ) ]]; then
    echo "Please specify a valid path to the image file" >&2
    return 1
  fi

  if [[ "${mode}" == "nbd" && -z "${export}" ]]; then
    echo "Please specify a valid export name of an external NBD server." >&2
    return 1
  fi

  if [[ "${mode}" == "legacy" ]]; then
    vm-cli mount "${type}" ${request_creds} ${readwrite} "${imagefile}" && \
      log_audit "Host virtual media mount : ${imagefile}"
  else
    vm-cli mount "${type}" ${request_creds} ${readwrite} "${imagefile}" "${export}" && \
      log_audit "Host virtual media mount from NBD server: ${imagefile}"
  fi
}

# @sudo cmd_virtualmedia_umount admin
# @restrict cmd_virtualmedia_umount admin
# @doc cmd_virtualmedia_umount
# Unmount the virtual media
#   MEDIA     - Virtual Media Device name to unmount (USB0, USB1 or USB2)
#   -y, --yes - Do not ask for confirmation
function cmd_virtualmedia_umount {
  local yes=""
  local media=""
  while [[ $# -gt 0 ]]; do
    case "${1}" in
      -y | --yes) yes="y";;
      *)
        if [[ -n "${media}" ]]; then
          abort_badarg "${1}"
        else
          media="${1}"
        fi
    esac
    shift
  done

  if [[ "${media}" != "USB0" && "${media}" != "USB1" && "${media}" != "USB2" ]]
  then
    abort_badarg "${media}"
  fi

  if [[ -z "${yes}" ]]; then
    confirm
  fi

  vm-cli umount "${media}" && \
    log_audit "Virtual Media (${media}) unmounted"
}


# @sudo cmd_config admin,operator,user
# @doc cmd_config
# Host configuration
function cmd_config {
  subcommand "$@"
}

# Helper functions for cmd_config_default
function config_default_set {
  local yes="${1-}"

  echo "Host BIOS settings will be reset to default on next boot."
  if [[ -z "${yes}" ]]; then
    confirm
  fi

  ipmitool chassis bootdev none clear-cmos=yes >/dev/null
  log_audit "Host BIOS settings will be reset to default on next boot"
}

function config_default_cancel {
  local yes="${1-}"

  echo "Cancel reset to default host settings on next boot."
  if [[ -z "${yes}" ]]; then
    confirm
  fi

  busctl set-property xyz.openbmc_project.Settings \
         /xyz/openbmc_project/control/host0/boot/one_time \
         xyz.openbmc_project.Control.Boot.ClearCmos ClearCmos b false
  log_audit "Cancel reset to default host settings on next boot"
}

function config_default_status {
  expect_noarg "$@"
  if (ipmitool chassis bootparam get 5 | grep -i 'CMOS Clear'>/dev/null); then
    echo "BIOS settings will be RESET to defaults on next boot"
  else
    echo "BIOS settings will NOT be reset to defaults"
  fi
}

# @sudo cmd_config_default admin
# @restrict cmd_config_default admin
# @doc cmd_config_default
# Reset UEFI BIOS config to defaults on the next boot or cancel that request
#  --cancel  - Cancel the settings reset request if it hasn't been processed yet
#  --status  - Show the status of the settings reset request
#  -y, --yes - Do not ask for confirmation
function cmd_config_default {
  local yes=""
  local action="set"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --cancel) action="cancel";;
      --status) action="status";;
      -y | --yes) yes="-y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  config_default_${action} ${yes}
}

# @sudo cmd_nmi admin
# @restrict cmd_nmi admin
# @doc cmd_nmi
# Emit an NMI to the host
#   -y, --yes - Do not ask for confirmation
function cmd_nmi {
  local yes=""

  while [[ $# -gt 0 ]]; do
    case "${1}" in
      -y | --yes) yes="y";;
      *) abort_badarg "${1}";;
    esac
    shift
  done

  echo "An NMI signal will be now sent to the host."
  echo "That may cause host OS crash an reboot if configured so."

  if [[ -z "${yes}" ]]; then
    confirm
  fi

  busctl set-property xyz.openbmc_project.Settings \
         /xyz/openbmc_project/Chassis/Control/NMISource \
         xyz.openbmc_project.Chassis.Control.NMISource Enabled b true
  log_audit "An NMI signal to the host has been emitted"
}

# @sudo cmd_console admin,operator,user
# @doc cmd_console
# Open virtual console
function cmd_console {
  expect_noarg "$@"
  cat << EOF
Starting a Host console connection.
Send <CR>~. to terminate it.
If connected via SSH, add extra ~ characters, one per SSH connection.
EOF
  log_audit "Connected to host's serial console"
  exec obmc-console-client
}
