#!/bin/bash -eu
#
# YADRO OpenBMC Command Line Interface
# Copyright (C) 2020-2021 YADRO
#
# SPDX-License-Identifier: Apache-2.0
#

# CLI: Diagnostic operations

# D-Bus object descriptions to manage the LED
LED_DBUS_SERVICE="xyz.openbmc_project.LED.GroupManager"
LED_DBUS_PATH="/xyz/openbmc_project/led/groups"
LED_DBUS_INTERFACE="xyz.openbmc_project.Led.Group"
LED_DBUS_PROPERTY="Asserted"

ID_LED_BLINKING="enclosure_identify_blink"
ID_LED_ON="enclosure_identify"

# @doc cmd_led
# Operations with identification LED
function cmd_led {
  subcommand "$@"
}

get_led_state() {
    local name=$1
    busctl get-property ${LED_DBUS_SERVICE} "${LED_DBUS_PATH}/${name}" \
                        ${LED_DBUS_INTERFACE} ${LED_DBUS_PROPERTY} \
                        2>/dev/null | awk '{print $NF}' ||:
}

set_led_state() {
    local name=$1
    local state=$2

    busctl set-property ${LED_DBUS_SERVICE} "${LED_DBUS_PATH}/${name}" \
                        ${LED_DBUS_INTERFACE} ${LED_DBUS_PROPERTY} \
                        b "${state}" 2>/dev/null ||:
}

# @sudo cmd_led_status admin,operator,user
# @doc cmd_led_status
# Check the identification LED status

# The above empty line prevents this from being printed as help.
# Shellcheck can't understand that `expect_noarg` references the arguments
# to ensure there are none, and complains about it. Silence it here.
# shellcheck disable=SC2120
function cmd_led_status {
  expect_noarg "$@"
  local state

  state=$(get_led_state ${ID_LED_BLINKING})

  # `enclosure_identify` has no sense while `enclosure_identify_blink` is
  # asserted.
  if [[ "${state}" != "true" ]]; then
    state=$(get_led_state ${ID_LED_ON})
  fi

  case "${state}" in
    true) state="ON";;
    false) state="OFF";;
    *) state="Unknown";;
  esac
  echo "Chassis identification LED: ${state}"
}

# @sudo cmd_led_on admin,operator
# @restrict cmd_led_on admin,operator
# @doc cmd_led_on
# Turn the identification LED on
function cmd_led_on {
  expect_noarg "$@"

  set_led_state ${ID_LED_BLINKING} false
  set_led_state ${ID_LED_ON} true
  log_audit "Set led on"

  # cmd_led_status takes no arguments, silience shellcheck about it
  # shellcheck disable=SC2119
  cmd_led_status
}

# @sudo cmd_led_off admin,operator
# @restrict cmd_led_off admin,operator
# @doc cmd_led_off
# Turn the identification LED off
function cmd_led_off {
  expect_noarg "$@"
  set_led_state ${ID_LED_BLINKING} false
  set_led_state ${ID_LED_ON} false
  log_audit "Set led off"

  # cmd_led_status takes no arguments, silience shellcheck about it
  # shellcheck disable=SC2119
  cmd_led_status
}

# @doc cmd_ping
# IPv4 ping from BMC
function cmd_ping {
  ping "$@"
}

# @doc cmd_ping6
# IPv6 ping from BMC
function cmd_ping6 {
  ping6 "$@"
}

# @doc cmd_traceroute
# IPv4 traceroute from BMC
function cmd_traceroute {
  traceroute "$@"
}

# @doc cmd_netstat
# Network information from BMC
function cmd_netstat {
  netstat "$@"
}

# D-Bus intrusion objects
INTR_SERVICE="xyz.openbmc_project.intrusionsensor.service"
INTR_RST_GPIO_PIN="CASE_OPEN_FAULT_RST"
INTR_DBUS_SERVICE="xyz.openbmc_project.IntrusionSensor"
INTR_DBUS_PATH="/xyz/openbmc_project/Intrusion/Chassis_Intrusion"
INTR_DBUS_INTERFACE="xyz.openbmc_project.Chassis.Intrusion"
INTR_DBUS_PROPERTY="Status"

# @doc cmd_intrusion
# Chassis intrusion detection commands
function cmd_intrusion {
  subcommand "$@"
}

# @sudo cmd_intrusion_on admin
# @restrict cmd_intrusion_on admin
# @doc cmd_intrusion_on
# Turn the chassis intrusion detection on
function cmd_intrusion_on {
  local msg="Enabled chassis intrusion detection"
  systemctl start ${INTR_SERVICE}
  systemctl enable ${INTR_SERVICE}
  echo "${msg}"
  log_audit "${msg}"
}

# @sudo cmd_intrusion_off admin
# @restrict cmd_intrusion_off admin
# @doc cmd_intrusion_off
# Turn the chassis intrusion detection off
function cmd_intrusion_off {
  local msg="Disabled chassis intrusion detection"
  systemctl stop ${INTR_SERVICE}
  systemctl disable ${INTR_SERVICE}
  echo "${msg}"
  log_audit "${msg}"
}

get_intrusion_state() {
  local state
  state=$(busctl get-property ${INTR_DBUS_SERVICE} "${INTR_DBUS_PATH}" \
                      ${INTR_DBUS_INTERFACE} ${INTR_DBUS_PROPERTY} \
                      2>/dev/null | awk '{print $NF;}' ||:)
  if [[ -z "${state}" ]]; then
    echo "N/A"
  elif [[ "${state}" == "\"Normal\"" ]]; then
    echo "No intrusion"
  else
    echo "Intrusion detected"
  fi
}

get_intrusion_service() {
 systemctl show ${INTR_SERVICE} | \
     grep -q "UnitFileState=enabled" && \
         echo Enabled || echo Disabled
}

# @sudo cmd_intrusion_status admin,operator,user
# @doc cmd_intrusion_status
# Show the chassis intrusion detection status
function cmd_intrusion_status {
  local sstate
  sstate=$(get_intrusion_service)
  echo "Chassis intrusion detection: ${sstate}"
  if [[ "${sstate}" == "Disabled" ]]; then
	  return 0
  fi

  echo "Chassis intrusion state: $(get_intrusion_state)"
}

# @sudo cmd_intrusion_clear admin
# @restrict cmd_intrusion_clear admin
# @doc cmd_intrusion_clear
# Clear the chassis intrusion status
function cmd_intrusion_clear {
  local clear_duration_us=500000
  local yes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -y | --yes) yes="y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  local chip
  local pin
  # We do want word splitting here, in fact `set --` is
  # specifically designed for word splitting.
  # shellcheck disable=SC2046
  set -- $(gpiofind ${INTR_RST_GPIO_PIN}) "" ""
  chip=$1
  pin=$2

  if [[ -z "${chip}" ]]; then
    echo "Intrusion detection reset is not available for this product"
    return 1
  fi

  local state
  state=$(get_intrusion_state)
  echo "Current chassis intrusion state: $(get_intrusion_state)"

  if [[ -z "${yes}" ]]; then
    echo -n "Clear it? "
    confirm
  fi

  gpioset -m time -u "${clear_duration_us}" "${chip}" "${pin}"=1
  gpioset "${chip}" "${pin}"=0
  log_audit "Asserted chassis intrusion reset pin from state [${state}]"
  echo "Intrusion status cleared"
  echo "New chassis intrusion status: $(get_intrusion_state)"
}
