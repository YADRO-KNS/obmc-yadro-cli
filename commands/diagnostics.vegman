#!/bin/bash -eu

#
# CLI: Diagnostic operations
#

# D-Bus object descriptions to manage the LED
LED_DBUS_SERVICE="xyz.openbmc_project.LED.GroupManager"
LED_DBUS_OBJECT="/xyz/openbmc_project/led/groups/enclosure_identify"
LED_DBUS_INTERFACE="xyz.openbmc_project.Led.Group"
LED_DBUS_PROPERTY="Asserted"

# @doc cmd_led
# Operations with identification LED
function cmd_led {
  subcommand "$@"
}

# @sudo cmd_led_status admin,operator,user
# @doc cmd_led_status
# Check the identification LED status
function cmd_led_status {
  expect_noarg "$@"
  local state="$(busctl get-property ${LED_DBUS_SERVICE} ${LED_DBUS_OBJECT} \
                                     ${LED_DBUS_INTERFACE} ${LED_DBUS_PROPERTY} \
                                     | awk '{print $NF}')"
  case "${state}" in
    true) state="ON";;
    false) state="OFF";;
    *) state="Unknown";;
  esac
  echo "Chassis identification LED: ${state}"
}

# @sudo cmd_led_on admin,operator
# @doc cmd_led_on
# Turn the identification LED on
function cmd_led_on {
  expect_noarg "$@"
  busctl set-property ${LED_DBUS_SERVICE} ${LED_DBUS_OBJECT} \
                      ${LED_DBUS_INTERFACE} ${LED_DBUS_PROPERTY} \
                      b true
  cmd_led_status
}

# @sudo cmd_led_off admin,operator
# @doc cmd_led_off
# Turn the identification LED off
function cmd_led_off {
  expect_noarg "$@"
  busctl set-property ${LED_DBUS_SERVICE} ${LED_DBUS_OBJECT} \
                      ${LED_DBUS_INTERFACE} ${LED_DBUS_PROPERTY} \
                      b false
  cmd_led_status
}

# @doc cmd_ping
# IPv4 ping from BMC
function cmd_ping {
  ping "$@"
}

# @doc cmd_ping6
# IPv6 ping from BMC
function cmd_ping6 {
  ping6 "$@"
}

# @doc cmd_traceroute
# IPv4 traceroute from BMC
function cmd_traceroute {
  traceroute "$@"
}

# @doc cmd_netstat
# Network information from BMC
function cmd_netstat {
  netstat "$@"
}
