#!/bin/bash -eu
#
# YADRO OpenBMC Command Line Interface
# Copyright (C) 2020-2021 YADRO
#
# SPDX-License-Identifier: Apache-2.0
#

# CLI: System health information

# @sudo cmd_inventory admin,operator
# @restrict cmd_inventory admin,operator
# @doc cmd_inventory
# System inventory
function cmd_inventory {
  lsinventory "$@"
}

# @sudo cmd_sensors admin,operator
# @restrict cmd_sensors admin,operator
# @doc cmd_sensors
# Sensor readings
function cmd_sensors {
  lssensors "$@"
}

# @doc cmd_logs
# Operations with logs
function cmd_logs {
  subcommand "$@"
}

# @doc cmd_logs_list
# Get list of available logs
function cmd_logs_list {
    expect_noarg "$@"

    local brief=
    local name=
    for entry in /usr/share/dreport.d/pl_user.d/*; do
        brief=$(awk -F: '/^#\s+@brief:/{print $2}' ${entry})
        name=$(realpath ${entry})
        printf "%-20s%s\n" "${name##*/}" "${brief}"
    done
}

# @sudo cmd_logs_show admin,operator,user
# @doc cmd_logs_show
# Show the selected system log
#  LOG    The name of the log to show (see 'health logs list')
function cmd_logs_show {
  if [[ $# -ne 1 ]]; then
    abort_badarg "Expected exactly 1 argument"
  fi
  local name="${1:-}"
  local file="/usr/share/dreport.d/plugins.d/${name}"

  for link in /usr/share/dreport.d/pl_user.d/E*${name}; do
    if [[ -f "${file}" ]] && [[ "$(realpath ${link})" = "${file}" ]]; then
      DREPORT_INCLUDE="/usr/share/cli/.include" \
      TIME_STAMP=$(date -u) exec "${file}"
      return 1
    fi
  done

  abort_badarg "${name}"
}

# @sudo cmd_logs_export admin,operator,user
# @doc cmd_logs_export
# Export system logs
function cmd_logs_export {
  expect_noarg "$@"

  local path="/run/dreport"
  local prefix="obmcdump_"
  local ext=".tar.xz"
  local timestamp
  timestamp=$(date +%Y%m%d%H%M%S)

  mkdir -p ${path}
  chmod 0777 ${path}
  dreport -v -n "${prefix}${timestamp}" -d "${path}"

  local filename="${path}/${prefix}${timestamp}${ext}"
  [[ -z "${SUDO_USER:-}" ]] || chown ${SUDO_USER} ${filename}

  echo "Logs are exported to the file '${filename}'"

  find ${path} -type f -name ${prefix}\*${ext} \
       -mmin +1 -user ${SUDO_USER:-${USER}} \
       -exec rm -f \{\} \;
}

# @sudo cmd_logs_clear admin
# @restrict cmd_logs_clear admin
# @doc cmd_logs_clear
# Clear system logs
function cmd_logs_clear {
  expect_noarg "$@"
  echo "All logs will be cleared, this event will be recorded to blank audit log."
  confirm
  journalctl --vacuum-time=1s
  echo "All logs are cleared."
}

# @sudo cmd_sel admin,operator
# @restrict cmd_sel admin,operator
# @doc cmd_sel
# Decode eSEL
#  ID    Shown eSEL record with specified ID
function cmd_sel {
  local sel_id=""
  if [[ $# -gt 0 ]]; then
    sel_id="$1"
  fi
  if [[ -n "${sel_id}" ]]; then
    esel --bmc "${sel_id}"
  else
    esel --bmc-list
  fi
}
