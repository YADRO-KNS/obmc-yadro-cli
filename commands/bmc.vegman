#!/bin/bash -eu
#
# YADRO OpenBMC Command Line Interface
# Copyright (C) 2020-2021 YADRO
#
# SPDX-License-Identifier: Apache-2.0
#

# CLI: General BMC configuration

SETTINGS_SERVICE="xyz.openbmc_project.Settings"
TIMESYNC_METHOD_PATH="/xyz/openbmc_project/time/sync_method"
TIMESYNC_METHOD_IFACE="xyz.openbmc_project.Time.Synchronization"
TIMESYNC_METHOD_PROPERTY="TimeSyncMethod"

# Format date in a non-standard way
function format_date {
  local compact="$1"
  local sec="$2"

  if [[ -n "${compact}" ]]; then
    date --date "@${sec}" --utc +'%F %T UTC'
  else
    date --date "@${sec}" --utc +'%a %d %b %Y %T UTC'
  fi
}

# @doc cmd_info
# General BMC information
function cmd_info {
  subcommand "$@"
}

# @doc cmd_info_uptime
# Show BMC uptime
#   -c, --compact - Show last boot time in compact format
function cmd_info_uptime {
  local compact=""
  local utc=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --compact) compact="y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  local sec
  local up
  sec=$(awk -F. '{print $1}' /proc/uptime)
  up=$(($(date +%s) - sec))

  printf 'Uptime is %dd %dh %dm %ds.\n' $((sec / 86400)) \
                                        $((sec % 86400 / 3600)) \
                                        $((sec % 3600 / 60)) \
                                        $((sec % 60))
  echo -n "Last BMC start was on "
  format_date "${compact}" "${up}"
}

# @sudo cmd_info_version admin,operator,user
# @doc cmd_info_version
# Show version of BMC and BIOS/UEFI
#   -b, --bmc  - Show BMC version
#   -u, --bios - Show BIOS/UEFI version
function cmd_info_version {
  # If no options are given, show everything
  [[ $# -eq 0 ]] && set -- -b -u

  local bmc_match='^BMC .*bmc_active\]$'
  local host_match='^Host .*bios_active\]$'
  local no_match='no-match-pattern'
  local bmc=${no_match}
  local host=${no_match}

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -b | --bmc) bmc=${bmc_match};;
      -u | --bios) host=${host_match};;
      *) abort_badarg "$1";;
    esac
    shift
  done

  exec_tool fwupdate --version | \
    awk -v re="(${bmc}|${host})" \
      '$0 ~ re { printf "%-8s %s\n", $1, $2 }'
}

# @doc cmd_datetime
# BMC date and time configuration
function cmd_datetime {
  subcommand "$@"
}

# @sudo cmd_datetime_method admin
# @restrict cmd_datetime_method admin
# @doc cmd_datetime_method
# Change time synchronization method
#   {host|ntp} - The synchronization method to use
function cmd_datetime_method {
  local method
  method=$(busctl get-property ${SETTINGS_SERVICE} \
                               ${TIMESYNC_METHOD_PATH} \
                               ${TIMESYNC_METHOD_IFACE} \
                               ${TIMESYNC_METHOD_PROPERTY})
  method=${method##*.}
  method=${method%\"*}

  if [[ $# -eq 0 ]]; then
      # VEGMAN doesn't have RTC and in manual mode it uses PCH time.
      echo "Current time synchronization method is ${method/Manual/Host}"
  else
    case "${1,,}" in
      host)
        if [[ ${method} != "Manual" ]]; then
          busctl set-property --timeout=60 ${SETTINGS_SERVICE} \
                              ${TIMESYNC_METHOD_PATH} \
                              ${TIMESYNC_METHOD_IFACE} \
                              ${TIMESYNC_METHOD_PROPERTY} s \
                              ${TIMESYNC_METHOD_IFACE}.Method.Manual
          log_audit "Changed time sync method to manual"
        fi
        ;;

      ntp)
        if [[ ${method} != "NTP" ]]; then
          busctl set-property --timeout=60 ${SETTINGS_SERVICE} \
                              ${TIMESYNC_METHOD_PATH} \
                              ${TIMESYNC_METHOD_IFACE} \
                              ${TIMESYNC_METHOD_PROPERTY} s \
                              ${TIMESYNC_METHOD_IFACE}.Method.NTP
          log_audit "Changed time sync method to NTP"
        fi
        ;;
      *)
        abort_badarg "Unsupported method specified. Expected host or ntp."
        ;;
    esac
  fi
}

# @doc cmd_datetime_show
# Show system time
#   -c, --compact - Show last boot time in compact format
function cmd_datetime_show {
  local compact=""
  local utc=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --compact) compact="y";;
      *) abort_badarg "$1";;
    esac
    shift
  done
  format_date "${compact}" "$(date +%s)"
}

# @sudo cmd_datetime_ntpconfig admin
# @restrict cmd_datetime_ntpconfig admin
# @doc cmd_datetime_ntpconfig
# Configure NTP server connection
function cmd_datetime_ntpconfig {
  if [[ $# -ge 1 && $1 =~ ^-*h(elp)?$ ]]; then
    exec_tool netconfig --cli-hide-cmd help ntp
    return
  fi
  if [[ $# -lt 3 ]]; then
    abort_badarg "Expected 3 or more arguments"
  fi
  exec_tool netconfig --cli-hide-cmd ntp "$@"
}

# @sudo cmd_ifconfig admin
# @restrict cmd_ifconfig admin
# @doc cmd_ifconfig
# BMC network configuration
function cmd_ifconfig {
  exec_tool netconfig --cli "$@"
}

# @sudo cmd_snmp admin
# @restrict cmd_snmp admin
# @doc cmd_snmp
# Manage SNMP trap receivers
function cmd_snmp {
  exec_tool yadro-snmpmgr "$@"
}

# @sudo cmd_syslog admin
# @restrict cmd_syslog admin
# @doc cmd_syslog
# Remote logging settings
function cmd_syslog {
  exec_tool netconfig --cli "$@"
}

# @restrict cmd_config admin
# @doc cmd_config
# BMC config backup and restore
function cmd_config {
  subcommand "$@"
}

# @sudo cmd_config_default admin
# @restrict cmd_config_default admin
# @doc cmd_config_default
# Restore the factory default BMC config
#   -k, --keepipconfig - Keep network settings
function cmd_config_default {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -k | --keepipconfig)
        echo "Option $1 is not supported yet" >&2
        exit 1;;
      *) abort_badarg "$1";;
    esac
    shift
  done
  exec_tool fwupdate --reset
  log_audit "Reset BMC configuration to factory defaults"
}

# @restrict cmd_update admin
# @doc cmd_update
# BMC and BIOS update
function cmd_update {
  subcommand "$@"
}

# @sudo cmd_update_start admin
# @restrict cmd_update_start admin
# @doc cmd_update_start
# Update BMC and BIOS.
#   -c, --clearcfg - Reset BMC/BIOS settings to manufacture defaults
#   -y, --yes      - Do not ask for confirmation
#   FILE           - Firmware archive to install
function cmd_update_start {
  local fwfile=""
  local reset=""
  local yes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --clearcfg) reset="--reset";;
      -y | --yes) yes="--yes";;
      -*) abort_badarg "$1";;
      *)
        if [[ -n "${fwfile}" ]]; then
          abort_badarg "$1"
        else
          fwfile="$1"
        fi
        ;;
    esac
    shift
  done

  if [[ -z "${fwfile}" ]]; then
    echo "Firmware file not specified" >&2
    return 1
  fi

  log_audit "Firmware update start from ${fwfile}"
  exec_tool fwupdate ${reset} ${yes} -f "${fwfile}"
  log_audit "Firmware update done"
}

# @sudo cmd_reboot admin
# @restrict cmd_reboot admin
# @doc cmd_reboot
# Reboot the BMC
#   -f, --force - Forced BMC reboot
#   -y, --yes   - Do not ask for confirmation
function cmd_reboot {
  local force=""
  local yes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f | --force) force="-f";;
      -y | --yes) yes="-y";;
      *) abort_badarg "$1";;
    esac
    shift
  done

  if [[ -n "${force}" ]]; then
    echo -n "BMC will be rebooted forcefully,"
  else
    echo -n "BMC will be rebooted gracefully,"
  fi
  echo " all user sessions including this one will be"
  echo "closed. Host will not be affected."

  if [[ -z "${yes}" ]]; then
    confirm
  fi

  echo "Reboot the BMC..."
  log_audit "BMC reboot"
  reboot ${force}
}
