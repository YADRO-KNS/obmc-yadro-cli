#!/bin/bash -eu

#
# CLI: User management
#

ROLE_ADMIN="admin"
ROLE_OPERATOR="operator"
ROLE_USER="user"

GROUP_ADMIN="%GROUP_ADMIN%"
GROUP_OPERATOR="%GROUP_OPERATOR%"
GROUP_USER="%GROUP_USER%"
GROUP_IPMI="ipmi"
GROUP_REDFISH="redfish"
GROUP_WEB="web"
GROUP_SSH="ssh"

# D-Bus entities to manage user accounts
DBUS_SERVICE="xyz.openbmc_project.User.Manager"
DBUS_ROOT_PATH="/xyz/openbmc_project/user"
DBUS_ATTRIBUTES="xyz.openbmc_project.User.Attributes"
DBUS_DELETE="xyz.openbmc_project.Object.Delete"

USERNAME_REGEX="^[\.a-zA-Z0-9_-]+$"

# Lookup for group by role name (privilege in BMC terms)
function role_to_group {
  case "$1" in
    ${ROLE_ADMIN})    echo "${GROUP_ADMIN}";;
    ${ROLE_OPERATOR}) echo "${GROUP_OPERATOR}";;
    ${ROLE_USER})     echo "${GROUP_USER}";;
    *)
      echo "Invalid role name: $1" >&2
      return 1
      ;;
  esac
}

# Lookup for role (privilege in BMC terms) by group name
function group_to_role {
  case "$1" in
    ${GROUP_ADMIN})    echo "${ROLE_ADMIN}";;
    ${GROUP_OPERATOR}) echo "${ROLE_OPERATOR}";;
    ${GROUP_USER})     echo "${ROLE_USER}";;
    *)
      echo "Invalid group name: $1" >&2
      return 1
      ;;
  esac
}

# @sudo cmd_create admin
# @doc cmd_create
# Create a new user
#   -n, --name NAME   User name
#   -r, --role ROLE   Role for user (admin, operator or user)
function cmd_create {
  local name=""
  local role="${ROLE_USER}"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n | --name)
        [[ $# -gt 1 ]] || abort_badarg "Name is not specified"
        name="$2"
        shift
        ;;
      -r | --role)
        [[ $# -gt 1 ]] || abort_badarg "Role is not specified"
        role="$2"
        shift
        ;;
      *) abort_badarg "$1";;
    esac
    shift
  done
  if [[ ! ${name} =~ ${USERNAME_REGEX} ]]; then
    echo "Invalid user name: ${name}" >&2
    return 1
  fi

  local priv="$(role_to_group "${role}")"
  busctl call ${DBUS_SERVICE} ${DBUS_ROOT_PATH} \
              ${DBUS_SERVICE} CreateUser sassb \
              "${name}" \
              4 ${GROUP_IPMI} ${GROUP_REDFISH} ${GROUP_WEB} ${GROUP_SSH} \
              "${priv}" \
              true
  echo "User ${name} created."
}

# @sudo cmd_show admin
# @doc cmd_show
# Show specific user
#   USERNAME...    Show user with specific name (multiple names can be added)
function cmd_show {
  while [[ $# -gt 0 ]]; do
    local user="$1"
    shift
    local grp="$(busctl get-property ${DBUS_SERVICE} "${DBUS_ROOT_PATH}/${user}" \
                                     ${DBUS_ATTRIBUTES} "UserPrivilege" \
                                     2>/dev/null \
                                     | awk '{gsub(/"/, "", $NF); print $NF}')"
    if [[ -z "${grp}" ]]; then
      echo "Invalid user: ${user}" >&2
      return 1
    fi
    local role="$(group_to_role ${grp})"
    echo "${user}: ${role}"
  done
}

# @sudo cmd_list admin
# @doc cmd_list
# Show list of users
function cmd_list {
  local path
  for path in $(busctl --list tree ${DBUS_SERVICE} | grep ${DBUS_ROOT_PATH}/); do
    cmd_show "${path##*/}"
  done
}

# @sudo cmd_delete admin
# @doc cmd_delete
# Delete users
#   -y, --yes       Do not ask for confirmation
#   USERNAME...     User account name (multiple names can be added).
function cmd_delete {
  local yes=""
  local names=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -y | --yes) yes="y";;
      *)
        if [[ $1 =~ ${USERNAME_REGEX} ]]; then
          names+=( $1 )
        else
          abort_badarg "$1"
        fi
        ;;
    esac
    shift
  done

  if [[ ${#names[@]} -lt 1 ]]; then
    echo "User name is not specified" >&2
    return 1
  fi

  if [[ -z "${yes}" ]]; then
    if [[ ${#names[@]} -eq 1 ]]; then
      echo "User '${names[0]}' will be removed permanently."
    else
      echo "${#names[@]} users will be removed permanently."
    fi
    confirm
  fi

  for name in ${names[@]}; do
    if ! busctl call ${DBUS_SERVICE} "${DBUS_ROOT_PATH}/${name}" \
                     ${DBUS_DELETE} Delete 2>/dev/null; then
      echo "Error deleting user: ${name}" >&2
      return 1
    fi
    echo "User ${name} removed."
  done
}

# @doc cmd_set
# Operations with user account
function cmd_set {
  subcommand "$@"
}

# @sudo cmd_set_password admin
# @doc cmd_set_password
# Update user password
#   USERNAME    User account name
function cmd_set_password {
  if [[ $# -eq 0 ]] || [[ -z "$1" ]]; then
    echo "User name is not specified" >&2
    return 1
  fi
  local name="$1"
  if [[ $(id -u "${name}") -lt 1000 ]]; then
    echo "Invalid user: ${name}" >&2
    return 1
  fi
  passwd "${name}"
}

# @sudo cmd_set_role admin
# @doc cmd_set_role
# Update user role
#   -n, --name NAME   User name
#   -r, --role ROLE   Role for user (admin, operator or user)
function cmd_set_role {
  local name=""
  local role=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n | --name)
        [[ $# -gt 1 ]] || abort_badarg "Name is not specified"
        name="$2"
        shift
        ;;
      -r | --role)
        [[ $# -gt 1 ]] || abort_badarg "Role is not specified"
        role="$2"
        shift
        ;;
      *) abort_badarg "$1";;
    esac
    shift
  done

  if [[ -z "${name}" ]]; then
    echo "User name not specified" >&2
    return 1
  fi
  if [[ -z "${role}" ]]; then
    echo "Role name not specified" >&2
    return 1
  fi

  local priv
  priv="$(role_to_group "${role}")"

  busctl set-property ${DBUS_SERVICE} "${DBUS_ROOT_PATH}/${name}" \
                      ${DBUS_ATTRIBUTES} "UserPrivilege" s ${priv}

  echo "User ${name} now has ${role} privileges."
}
